import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
    id 'java-library'
    id 'org.jetbrains.kotlin.jvm'
    id 'org.jetbrains.kotlin.plugin.serialization'
    id 'application'
    id 'com.apollographql.apollo3' version '3.8.2'
}

dependencies {
    implementation project(':CampfireApiMedia')
    implementation project(':CampfireApi')
    implementation project(':DevSupJava')
    implementation project(':DevSupJavaPc')
    implementation project(':BonfireServerNetworking')
    implementation 'com.google.firebase:firebase-admin:9.0.0'
    implementation 'org.slf4j:slf4j-simple:2.0.7'
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:1.6.0"

    implementation 'com.squareup.okhttp3:okhttp:4.12.0'
    implementation "com.apollographql.apollo3:apollo-runtime:3.8.2"
}

jar {
    manifest.attributes('Main-Class': "com.dzen.campfire.server.app.App")
    from {
//        configurations.implementation.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

application {
    mainClass = 'com.dzen.campfire.server.app.App'
}

repositories {
    mavenCentral()
}

tasks.withType(KotlinCompile).configureEach {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

tasks.named('run').configure {
    workingDir = rootProject.projectDir
}

apollo {
    service("melior") {
        packageName.set("com.dzen.campfire.server")

        // use CampfireServer:downloadMeliorApolloSchema to update schema
        introspection {
            endpointUrl.set("http://localhost:8000")
            schemaFile.set(file("src/main/graphql/com/dzen/campfire/server/schema.graphqls"))
        }

        mapScalar("JSONObject", "kotlin.String", "com.dzen.campfire.server.rust.JsonAdapter")
    }
}
